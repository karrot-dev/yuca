# This file is managed by ansible. It belongs to {{ role_path }}.
# See https://github.com/yunity/yuca to change.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '{{ postgresql_database }}',
        'USER': '{{ postgresql_user }}',
        'PASSWORD': '{{ postgresql_password }}',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

DEBUG = False
ALLOWED_HOSTS = [
    '{{ server_name }}'
    {% if additional_allowed_hosts is defined %}
    ,{% for entry in additional_allowed_hosts %}
    '{{ entry }}'{% if not loop.last %},{% endif %}
    {% endfor %}
    {% endif %}
]

{% if csrf_trusted_origins is defined %}
CSRF_TRUSTED_ORIGINS = [
    {% for entry in csrf_trusted_origins %}
    '{{ entry }}'{% if not loop.last %},{% endif %}
    {% endfor %}
]
{% endif %}

HOSTNAME = 'https://{{ server_name }}'
STATIC_ROOT = '/var/www/{{ site }}/www/static/'
SITE_NAME = '{{ site_name }}'
MEDIA_ROOT = '/var/www/{{ site }}/www/{{ uploads_directory }}/'
MEDIA_URL = '/media/'

FILE_UPLOAD_PERMISSIONS = 0o640
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o750

DEFAULT_FROM_EMAIL = '{{ from_email_address }}'
{% if influxdb_database is not defined %}
INFLUXDB_DISABLED = True
{% else %}
INFLUXDB_DISABLED = False
{% endif %}
INFLUXDB_HOST = '127.0.0.1'
INFLUXDB_PORT = '8086'
INFLUXDB_USER = ''
INFLUXDB_PASSWORD = ''

INFLUXDB_DATABASE = '{{ influxdb_database|default('') }}'
INFLUXDB_TAGS_HOST = 'yuca'
INFLUXDB_TIMEOUT = 2
INFLUXDB_USE_CELERY = False
INFLUXDB_USE_THREADING = True

import os

{% if raven_dsn is defined %}
import raven
RAVEN_CONFIG = {
    'dsn': '{{ raven_dsn }}',
    'release': raven.fetch_git_sha(os.path.dirname(os.pardir)),
}
{% endif %}

SECRET_KEY = '{{ secret_key }}'

EMAIL_BACKEND = 'anymail.backends.sparkpost.EmailBackend'
ANYMAIL_SPARKPOST_API_KEY = '{{ sparkpost_subaccount_key }}'
ANYMAIL = {
    # Should be a subaccount to receive webhooks scoped to this account
    # https://app.sparkpost.com/account/subaccounts
    # Transmissions: Read/Write
    # Event Webhooks: Read/Write
    "SPARKPOST_API_KEY": "{{ sparkpost_subaccount_key }}"
}

# to set up a relay webhook for incoming emails
# Relay Webhooks: Read/Write
# Inbound Domains: Read/Write
SPARKPOST_ACCOUNT_KEY = '{{ sparkpost_account_key }}'
SPARKPOST_RELAY_DOMAIN = '{{ sparkpost_relay_domain }}'

# shared secrets, will be used by setup_sparkpost management command and checked when receiving webhook requests
SPARKPOST_RELAY_SECRET = '{{ sparkpost_relay_secret }}'
SPARKPOST_WEBHOOK_SECRET = '{{ sparkpost_webhook_secret }}'

FCM_SERVER_KEY = '{{ fcm_server_key }}'

REDIS_HOST = os.environ.get('REDIS_HOST', 'localhost')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:6379/{{ redis_db }}".format(REDIS_HOST),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

CHANNEL_LAYERS = {
    "default": {
         "BACKEND": "channels_redis.core.RedisChannelLayer",
         "CONFIG": {
             "hosts": ["redis://{}:6379/{{ redis_db }}".format(REDIS_HOST)],
         },
    },
}

import redis
pool = redis.ConnectionPool.from_url("redis://{}:6379/{{ redis_db }}".format(REDIS_HOST))

HUEY = {
    "always_eager": False,
    "connection": {
        "connection_pool": pool,
    },
    "consumer": {
        "workers": 8,
        "worker_type" : "greenlet",
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'WARNING',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }

    },
    'loggers': {
        'raven': {
            'level': 'WARNING',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'WARNING',
            'handlers': ['console'],
            'propagate': False,
        },
        'django': { # Disable django admin email logging by overriding
            'level': 'ERROR',
            'handlers': ['sentry'],
        },
    },
    'root': { # log everything unconfigured as error
        'level': 'ERROR',
        'handlers': ['sentry'],
    },
}
