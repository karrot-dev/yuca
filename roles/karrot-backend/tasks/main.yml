---

- name: add yarn apt key
  apt_key:
    url: https://dl.yarnpkg.com/debian/pubkey.gpg
    state: present

- name: add yarn repository
  apt_repository:
    repo: deb https://dl.yarnpkg.com/debian/ stable main
    state: present

- name: add nodesource apt key
  apt_key:
    url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    state: present

- name: add nodejs repository
  apt_repository:
    repo: deb https://deb.nodesource.com/node_6.x stretch main
    state: present

- name: install dependencies
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - virtualenv
    - build-essential # for pip to build some libraries
    - python3
    - python3-dev
    - redis-server
    - gettext
    - python-pip # so we can pip install influxdb later
    - yarn # for building the mjml templates
    - nodejs # for yarn

- name: Start Redis and enable at boot
  systemd:
    name: redis-server
    enabled: true
    state: started
    daemon_reload: yes

#------------------------------------------------------------------
# nginx config

- name: nginx config
  template:
    src: nginx.j2
    dest: /etc/nginx/sites-available/{{ site }}
  notify:
    - reload nginx

- name: nginx sites-enabled symlink
  file:
    src: /etc/nginx/sites-available/{{ site }}
    dest: /etc/nginx/sites-enabled/{{ site }}
    state: link
  notify:
    - reload nginx

- name: create frontend directory
  file:
    path: "{{ static_root }}"
    state: directory
  when: we_are_in_vagrant

- name: dummy frontend file
  copy:
    content: hello
    dest: "{{ static_root }}/index.html"
  when: we_are_in_vagrant

#------------------------------------------------
# create directories and set default permissions

- name: deploy group
  group:
    name: "{{ site }}-deploy"
    state: present

- name: deploy user
  user:
    name: "{{ site }}-deploy"
    state: present
    group: "{{ site }}-deploy"
    createhome: no
    home: "/var/www/{{ site }}-deploy"
    shell: /bin/bash

- name: set default acl permission mask
  acl:
    path: "/var/www/{{ site }}/www"
    etype: mask
    permissions: rwx
    recursive: yes
    default: yes
    state: present

- name: make all files readable to site user by default
  acl:
    path: "/var/www/{{ site }}/www/"
    entity: "{{ site }}"
    etype: user
    permissions: rX
    recursive: yes
    default: yes
    state: present

- name: create uploads directory and set ownership to site user
  file:
    dest: /var/www/{{ site }}/www/{{ uploads_directory }}
    state: directory
    owner: "{{ site }}"
    group: "{{ site }}"
    mode: "u+rwX"
    recurse: yes

- name: make new uploads readable to www-data by default
  acl:
    path: "/var/www/{{ site }}/www/{{ uploads_directory }}"
    entity: "www-data"
    etype: user
    permissions: rX
    default: yes
    recursive: yes
    state: present

- name: create static files directory and set ownership to deploy user
  file:
    path: "/var/www/{{ site }}/www/static"
    state: directory
    owner: "{{ site }}-deploy"
    group: "{{ site }}-deploy"
    mode: "u+rwX"
    recurse: yes

- name: make static files readable to www-data by default
  acl:
    path: "/var/www/{{ site }}/www/static"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    default: yes
    state: present

#------------------------------------------------------------------
# deploy setup

- name: setup deploy user
  user:
    name: "{{ site }}-deploy"
    state: present
    groups:
      - "{{ site }}"
    home: "/var/www/{{ site }}-deploy"

- name: set deploy public key
  authorized_key:
    user: "{{ site }}-deploy"
    state: present
    key: "{{ deploy_public_key }}"


- name: make site directory readable by deploy user
  acl:
    path: "/var/www/{{ site }}"
    entity: "{{ site }}-deploy"
    etype: user
    permissions: rX
    state: present

- name: make www readable by deploy user
  acl:
    path: "/var/www/{{ site }}/www"
    entity: "{{ site }}-deploy"
    etype: user
    permissions: rX
    state: present

#-----------------------------------------------------------------
# handle permissions of existing files

- name: make site directory readable by www-data
  acl:
    path: "/var/www/{{ site }}"
    entity: "www-data"
    etype: user
    permissions: rX
    state: present

- name: make www readable by www-data
  acl:
    path: "/var/www/{{ site }}/www"
    entity: "www-data"
    etype: user
    permissions: rX
    state: present

- name: set acl permission mask for existing files
  acl:
    path: "/var/www/{{ site }}/www"
    etype: mask
    permissions: rwx
    recursive: yes
    state: present

- name: make all files readable by site user
  acl:
    path: "/var/www/{{ site }}/www/"
    entity: "{{ site }}"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: make uploads readable by www-data
  acl:
    path: "/var/www/{{ site }}/www/{{ uploads_directory }}"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: make static files readable by www-data
  acl:
    path: "/var/www/{{ site }}/www/static"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: backend directory owned by deploy user
  file:
    path: "/var/www/{{ site }}/www/backend"
    state: directory
    owner: "{{ site }}-deploy"
    group: "{{ site }}-deploy"
    mode: "u+rwX"
    recurse: yes

#------------------------------------------------------------------
# env setup & basic deploy

- become_user: "{{ site }}-deploy"
  block:
  - name: git repo
    git:
      repo: https://github.com/yunity/karrot-backend.git
      dest: /var/www/{{ site }}/www/backend
      update: true
      force: yes
      version: "{{ branch }}"

  - name: virtualenv
    command: >
      virtualenv
        --no-setuptools
        --python=python3
        --no-site-packages
        /var/www/{{ site }}/www/backend/env
    args:
      creates: /var/www/{{ site }}/www/backend/env

  - name: install tools
    pip:
      name: "{{ item }}"
      virtualenv: "/var/www/{{ site }}/www/backend/env"
    with_items:
      - setuptools
      - pip-tools

  - name: pip sync
    command: env/bin/pip-sync
    args:
      chdir: "/var/www/{{ site }}/www/backend"
    changed_when: False

- name: django local settings
  template:
    src: local_settings.py.j2
    dest: /var/www/{{ site }}/www/backend/config/local_settings.py
  notify:
    - restart app

- name: initialize database
  command: "env/bin/python manage.py migrate"
  args:
    chdir: "/var/www/{{ site }}/www/backend"
  become_user: "{{ site }}-deploy"
  changed_when: False

- name: allow user to restart workers
  copy:
    dest: "/etc/sudoers.d/deploy_{{ site }}"
    content: |
      %{{ site }}-deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart {{ site }}.target
      %{{ site }}-deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart {{ site }}-huey.service

- import_tasks: influxdb.yml
  when: influxdb_database is defined

#------------------------------------------------------------------
# file backups

- import_tasks: backup.yml
  when: backup_password is defined

#------------------------------------------------------------------
# systemd servics

- name: systemd daphne socket
  template:
    src: systemd.daphne.socket.j2
    dest: /etc/systemd/system/{{ site }}.socket
  notify:
    - restart daphne

- name: systemd daphne service
  template:
    src: systemd.daphne.service@.j2
    dest: /etc/systemd/system/{{ site }}@.service
  notify:
    - restart daphne

- name: systemd daphne target
  template:
    src: systemd.daphne.target.j2
    dest: /etc/systemd/system/{{ site }}.target
  notify:
    - restart daphne

- name: systemd huey service
  template:
    src: systemd.huey.service.j2
    dest: /etc/systemd/system/{{ site }}-huey.service
  notify:
    - restart huey

- name: systemd enable daphne
  systemd:
    name: "{{ site }}.target"
    state: started
    enabled: yes

- name: systemd enable huey
  systemd:
    name: "{{ site }}-huey.service"
    state: started
    enabled: yes
