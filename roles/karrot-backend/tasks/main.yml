---

- name: install dependencies
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - virtualenv
      - python3
      - python3-dev
      - gettext
      - python3-pip # so we can pip install influxdb later
      # geospatial libaries for django
      # see https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/geolibs/
      - binutils
      - libproj-dev
      - gdal-bin
      # to improve performance when using maxmind geoip db
      # see https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoip2/
      - libmaxminddb0
      - libmaxminddb-dev
      # tool for updating the database
      - geoipupdate
  tags:
  - dependencies

#------------------------------------------------------------------
# nginx config

- name: build csp config
  set_fact:
    csp_config: "{{ csp_config | default('') }}{{ item.key}} {{ item.value | join(' ') }}; "
    csp_header: "Content-Security-Policy"
  with_dict:
    default-src:
      - "'self'"
    connect-src:
      - "'self'"
      - "wss://{{ server_name }}"
      - "https://nominatim.openstreetmap.org"
      - "https://firebaseinstallations.googleapis.com"
      - "https://fcmregistrations.googleapis.com"
      - "https://sentry.io"
    style-src:
      - "'self'"
      - "'unsafe-inline'"
    font-src:
      - "'self'"
      - "data:"
    img-src:
      - "'self'"
      - "https:"
      - "data:"
    report-uri:
      - "{{ csp_report_uri }}"
  when: csp_report_uri is defined
  tags:
    - nginx

- name: set csp to report-only
  set_fact:
    csp_header: "Content-Security-Policy-Report-Only"
  when: csp_report_only
  tags:
    - nginx

- name: create snippets directory
  file:
    path: /etc/nginx/snippets/{{ site }}
    state: directory
  tags:
    - nginx

- name: nginx headers snippet
  template:
    src: nginx.headers.j2
    dest: /etc/nginx/snippets/{{ site }}/headers
  notify:
    - reload nginx
  tags:
    - nginx

- name: nginx config
  template:
    src: nginx.j2
    dest: /etc/nginx/sites-available/{{ site }}
  vars:
    karrot_nginx_server_name: '{{ server_name }}'
    karrot_nginx_root: '{{ static_root }}'
  notify:
    - reload nginx
  tags:
    - nginx

- name: nginx sites-enabled symlink
  file:
    src: /etc/nginx/sites-available/{{ site }}
    dest: /etc/nginx/sites-enabled/{{ site }}
    state: link
  notify:
    - reload nginx
  tags:
    - nginx

- name: nginx branch config
  when: karrot_branch_deployment_enabled
  template:
    src: nginx.j2
    dest: /etc/nginx/sites-available/{{ site }}-branch
  vars:
    karrot_nginx_server_name: '{{ karrot_branch_deployment_server_name }}'
    karrot_nginx_root: '{{ karrot_branch_deployment_root }}'
  notify:
    - reload nginx
  tags:
    - nginx

- name: nginx branch sites-enabled symlink
  when: karrot_branch_deployment_enabled
  file:
    src: /etc/nginx/sites-available/{{ site }}-branch
    dest: /etc/nginx/sites-enabled/{{ site }}-branch
    state: link
  notify:
    - reload nginx
  tags:
    - nginx

- name: create frontend directory
  file:
    path: "{{ static_root }}"
    state: directory
  when: we_are_in_vagrant

- name: dummy frontend file
  copy:
    content: hello
    dest: "{{ static_root }}/index.html"
  when: we_are_in_vagrant

#------------------------------------------------
# create directories and set default permissions

- name: deploy group
  group:
    name: "{{ site }}-deploy"
    state: present

- name: deploy user
  user:
    name: "{{ site }}-deploy"
    state: present
    group: "{{ site }}-deploy"
    createhome: no
    home: "/var/www/{{ site }}-deploy"
    shell: /bin/bash

- name: set default acl permission mask
  acl:
    path: "/var/www/{{ site }}/www"
    etype: mask
    permissions: rwx
    recursive: yes
    default: yes
    state: present

- name: make all files readable to site user by default
  acl:
    path: "/var/www/{{ site }}/www/"
    entity: "{{ site }}"
    etype: user
    permissions: rX
    recursive: yes
    default: yes
    state: present

- name: create uploads directory and set ownership to site user
  file:
    dest: /var/www/{{ site }}/www/{{ uploads_directory }}
    state: directory
    owner: "{{ site }}"
    group: "{{ site }}"
    mode: "u+rwX"
    recurse: yes

- name: make new uploads readable to www-data by default
  acl:
    path: "/var/www/{{ site }}/www/{{ uploads_directory }}"
    entity: "www-data"
    etype: user
    permissions: rX
    default: yes
    recursive: yes
    state: present

- name: create static files directory and set ownership to deploy user
  file:
    path: "/var/www/{{ site }}/www/static"
    state: directory
    owner: "{{ site }}-deploy"
    group: "{{ site }}-deploy"
    mode: "u+rwX"
    recurse: yes

- name: make static files readable to www-data by default
  acl:
    path: "/var/www/{{ site }}/www/static"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    default: yes
    state: present

#------------------------------------------------------------------
# deploy setup

- name: setup deploy user
  user:
    name: "{{ site }}-deploy"
    state: present
    groups:
      - "{{ site }}"
    home: "/var/www/{{ site }}-deploy"

- name: set deploy public key
  authorized_key:
    user: "{{ site }}-deploy"
    state: present
    key: "{{ deploy_public_key }}"


- name: make site directory readable by deploy user
  acl:
    path: "/var/www/{{ site }}"
    entity: "{{ site }}-deploy"
    etype: user
    permissions: rX
    state: present

- name: make www readable by deploy user
  acl:
    path: "/var/www/{{ site }}/www"
    entity: "{{ site }}-deploy"
    etype: user
    permissions: rX
    state: present

#-----------------------------------------------------------------
# handle permissions of existing files

- name: make site directory readable by www-data
  acl:
    path: "/var/www/{{ site }}"
    entity: "www-data"
    etype: user
    permissions: rX
    state: present

- name: make www readable by www-data
  acl:
    path: "/var/www/{{ site }}/www"
    entity: "www-data"
    etype: user
    permissions: rX
    state: present

- name: set acl permission mask for existing files
  acl:
    path: "/var/www/{{ site }}/www"
    etype: mask
    permissions: rwx
    recursive: yes
    state: present

- name: make all files readable by site user
  acl:
    path: "/var/www/{{ site }}/www/"
    entity: "{{ site }}"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: make uploads readable by www-data
  acl:
    path: "/var/www/{{ site }}/www/{{ uploads_directory }}"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: make static files readable by www-data
  acl:
    path: "/var/www/{{ site }}/www/static"
    entity: "www-data"
    etype: user
    permissions: rX
    recursive: yes
    state: present

- name: backend directory owned by deploy user
  file:
    path: "/var/www/{{ site }}/www/backend"
    state: directory
    owner: "{{ site }}-deploy"
    group: "{{ site }}-deploy"
    mode: "u+rwX"
    recurse: yes

#------------------------------------------------------------------
# env setup & basic deploy

- become_user: "{{ site }}-deploy"
  block:

  - set_fact:
      download_filename: "karrot-backend-{{ branch | regex_replace('[^a-zA-Z0-9.-]', '-') }}.pyz"

  - name: download karrot-backend
    get_url:
      url: 'https://download.karrot.world/{{ download_filename }}'
      dest: /var/www/{{ site }}/www/backend/karrot-backend.pyz
      mode: "u+rwx,a+x"

- name: env config
  template:
    src: karrot.env
    dest: /var/www/{{ site }}/www/backend/.env
  notify:
    - restart app
  tags:
    - django settings

- name: initialize database
  command: "./karrot-backend.pyz --env .env migrate"
  args:
    chdir: "/var/www/{{ site }}/www/backend"
  become_user: "{{ site }}-deploy"
  changed_when: False

- name: allow user to restart workers
  copy:
    dest: "/etc/sudoers.d/deploy_{{ site }}"
    content: |
      %{{ site }}-deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart {{ site }}.target
      %{{ site }}-deploy ALL=(ALL) NOPASSWD: /bin/systemctl restart {{ site }}-huey.service

- import_tasks: influxdb.yml
  when: influxdb_database is defined

#------------------------------------------------------------------
# file backups

- import_tasks: backup.yml
  when: backup_password is defined

#------------------------------------------------------------------
# maxmind geoip updates

- import_tasks: geoipupdate.yml
  when: geoipupdate__account_id is defined and geoipupdate__license_key is defined
  tags:
    - geoipupdate

#------------------------------------------------------------------
# systemd services

- name: systemd daphne socket
  template:
    src: systemd.daphne.socket.j2
    dest: /etc/systemd/system/{{ site }}.socket
  notify:
    - restart daphne

- name: systemd daphne service
  template:
    src: systemd.daphne.service@.j2
    dest: /etc/systemd/system/{{ site }}@.service
  notify:
    - restart daphne

- name: systemd daphne target
  template:
    src: systemd.daphne.target.j2
    dest: /etc/systemd/system/{{ site }}.target
  notify:
    - restart daphne

- name: systemd huey service
  template:
    src: systemd.huey.service.j2
    dest: /etc/systemd/system/{{ site }}-huey.service
  notify:
    - restart huey

- name: systemd enable daphne
  systemd:
    name: "{{ site }}.target"
    state: started
    enabled: yes

- name: systemd enable huey
  systemd:
    name: "{{ site }}-huey.service"
    state: started
    enabled: yes

#------------------------------------------------------------------
# external email reply trimmer service

- import_tasks: email_reply_trimmer.yml
